#!/bin/bash

set -e

LXCCMD=${LXCCMD:-lxc}
ACCNT=$USERNAME
LXCIMAGE=${LXCIMAGE:-lxd-terminal-$ACCNT}
LXCEXEC="${LXCCMD} exec ${LXCIMAGE} --"

LXCIMAGELST=`$LXCCMD list --format csv ^$LXCIMAGE$`

if [ ! "$LXCIMAGELST" == "" ]; then
	exit 0
fi

# Allocate image
echo "Allocating LXC image ${LXCIMAGE}..."
${LXCCMD} launch ubuntu:22.04 ${LXCIMAGE}

# Setup destruction on failure
cleanup () {
	echo "ERROR: Deleting ${LXCIMAGE} after return..."
	read -t 30 -n 1
	${LXCCMD} delete -f ${LXCIMAGE}
}
trap cleanup ERR

# Configuring image
echo "Configuring image ... "
${LXCCMD} config set ${LXCIMAGE} environment.DISPLAY :1
${LXCCMD} config set ${LXCIMAGE} environment.PULSE_SERVER unix:/tmp/pulse-native
# NOTE: Breaks on non-nvidia systems. Need to figure out how to detect them
# ${LXCCMD} config set ${LXCIMAGE} nvidia.driver.capabilities all
# ${LXCCMD} config set ${LXCIMAGE} nvidia.runtime true

echo "Adding devices ... "
${LXCCMD} config device add ${LXCIMAGE} hostgpu gpu
X11DISPLAYNUM=$( echo $DISPLAY | cut -d : -f 2 )
${LXCCMD} config device add ${LXCIMAGE} x11proxy proxy bind=container connect=unix:@/tmp/.X11-unix/X1 listen=unix:@/tmp/.X11-unix/X${X11DISPLAYNUM} security.gid=$(id -g) security.uid=$(id -u)
${LXCCMD} config device add ${LXCIMAGE} pulseproxy proxy bind=container connect=unix:/run/user/$(id -u)/pulse/native listen=unix:/tmp/pulse-native security.gid=$(id -g) security.uid=$(id -u) mode=0777

# Update image
echo "Updating image ... "
${LXCEXEC} env DEBIAN_FRONTEND=noninteractive apt-get update -qq
${LXCEXEC} env DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -qq -yy

# Add the current user as a user in the image
echo "Setting up user ... "
${LXCEXEC} useradd --groups sudo --shell ${SHELL} $USERNAME
${LXCEXEC} rm -rf /home/$USERNAME
${LXCEXEC} mkdir -p /home/$USERNAME
${LXCEXEC} chown $USERNAME:$USERNAME /home/$USERNAME
echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" | ${LXCEXEC} tee /etc/sudoers.d/lxd-terminal-user

# Setup an ID map between host and guest
HOSTUID=`id -u`
HOSTGID=`id -g`
GUESTUID=`${LXCEXEC} id -u $USERNAME`
GUESTGID=`${LXCEXEC} id -g $USERNAME`

printf "uid ${HOSTUID} ${GUESTUID}\ngid ${HOSTGID} ${GUESTGID}" | ${LXCCMD} config set ${LXCIMAGE} raw.idmap -
${LXCCMD} restart ${LXCIMAGE}

# Map the home directory from the host into the container
mkdir -p ${SNAP_USER_COMMON}/home
echo "Mapping ${SNAP_USER_COMMON}/home to /home/${USERNAME} ... "
${LXCCMD} config device add ${LXCIMAGE} home disk source=${SNAP_USER_COMMON}/home path=/home/${USERNAME}

# Map the LXD socket into the container



echo "Image Building Complete"

